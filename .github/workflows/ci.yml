name: E-Commerce API CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest==7.4.4 pytest-cov==6.0.0 pytest-asyncio==0.21.1 uvloop
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Create simple test script
      run: |
        echo "import os
        import sys
        import pytest
        import asyncio

        # Run individual tests in separate processes to avoid event loop issues
        def run_tests():
            # Set event loop policy to use a more robust implementation
            if sys.platform != 'win32':
                try:
                    import uvloop
                    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
                except ImportError:
                    pass
            
            # Force a new event loop
            asyncio.set_event_loop(asyncio.new_event_loop())
            
            # Run unit tests first, then integration tests
            exit_code = 0
            for test_dir in ['tests/unit', 'tests/integration']:
                print(f'\\nRunning tests in {test_dir}...')
                # Run with -v for more verbose output to debug issues
                result = pytest.main(['-xvs', test_dir, '--cov=app', '--cov-append'])
                if result != 0:
                    exit_code = result
            
            # Generate coverage report
            pytest.main(['--cov-report=xml'])
            
            return exit_code
            
        if __name__ == '__main__':
            sys.exit(run_tests())" > run_tests.py
      
    - name: Test with pytest
      env:
        MONGODB_URL: mongodb://localhost:27017/ecommerce_test
        SECRET_KEY: test_secret_key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        ENVIRONMENT: test
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python run_tests.py
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        # Replace with your Docker Hub username and create a secret for your password
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        # Replace with your Docker Hub username and repository name
        tags: yourusername/ecommerce-api:latest

  # Uncomment and customize this job if deploying to Render or another platform
  # deploy:
  #   needs: build-and-push
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Deploy to Render
  #     run: |
  #       curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"